#
                    # Dragonfly config for keyboard
#

#--- Language section ------------------------------------------------------

# these config files are discovered automatically when they are created/edited and saved without the need to sleep and wake up or microphone off and microphone on, because they are monitored for changes by _dragonfly_tools.py (class ConfigManagerGrammar(Grammar)), and the touch(update timestamp) of the parent python module/script, which causes the latter to be reloaded as I believe

# This command will replace the command map in _keyboard.py and you cannot do cmd.map.append as it will give an error saying it's immutable
#cmd.map = {'page up [<n>]': }

	
#---------------------------------------------------------------------------
# Here we define various functions for formatting text.
# Each of these functions must have a docstring which defines its
#  spoken-form.  This docstring must include the "<dictation>" extra.
#  See below for various examples.

# Format: some_words
def format_score(dictation):          # Function name must start with "format_".
    """ (snake [case]|scorify|score) <dictation> """         # Docstring defining spoken-form.
    text = str(dictation)             # Get written-form of dictated text.
    return "_".join(text.split(" "))  # Put underscores between words.

# Format: some_words()
def format_under_function(dictation):
    """ under func <dictation> """
    text = str(dictation)
    return "_".join(text.split(" ")) + "()"

# Format: SomeWords
def format_studley(dictation):
    """ (Pascal [case]|studley) <dictation> """
    text = str(dictation)
    words = [word.capitalize() for word in text.split(" ")]
    return "".join(words)

# Format: somewords
def format_one_word(dictation):
    """ (squash|[all] one word) <dictation> """
    text = str(dictation)
    return "".join(text.split(" "))

# Format: SOMEWORDS
def format_upper_one_word(dictation):
    """ (upper squash|one word upper) <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "".join(words)

# Format: SOME_WORDS
def format_upper_score(dictation):
    """ upper (snake [case]|scorify|score) <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "_".join(words)

# Format: someWords
def format_java_method(dictation):
    """ (camel [case]|Java method) <dictation> """
    text = str(dictation)
    words = text.split(" ")
    return words[0] + "".join(w.capitalize() for w in words[1:])

# Format: some-words
def format_dashes(dictation):
    """ (dashify|hive|dashes) <dictation> """
    text = str(dictation)
    words = text.split(" ")	
    return "-".join(words)

# Format: SOME WORDS
def format_upper_case(dictation):
    """ (all-caps|capitalise) <dictation> """
    text = str(dictation)
    #words = [word.upper() for word in text.split(" ")]
    #return " ".join(words)
    return text.upper()

# Format: Some Words
def format_upper_case(dictation):
    """ (title case|titlefy) <dictation> """
    text = str(dictation)
    #words = [word.capitalise() for word in text.split(" ")]
    #return " ".join(words)
    return text.title()

# ----------
