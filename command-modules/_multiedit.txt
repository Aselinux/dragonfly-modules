#
# This is a config file for Dragonfly's _multiedit.py command-module.
#  To use this config, you must rename this file to _multiedit.txt and
#  place it in the same directory as the _multiedit.py file.
#

# Pull in all of Dragonfly's action objects so that we can use them here.

from dragonfly import *
import os


#---------------------------------------------------------------------------
# Here we define the release action which releases all
#  modifier-keys used within this grammar.  It is defined here
#  because this functionality is used in many different places.
#  Note that it is harmless to release ("...:up") a key multiple
#  times or when that key is not held down at all.

release = Key("shift:up, ctrl:up, alt:up, win:up")


#---------------------------------------------------------------------------
# Here we define the single-action commands.  These can be spoken
#  in series so as to execute multiple actions within a single utterance.

cmd.map = {
           # Spoken-form    ->    ->    ->     Action object

           "(up|gup|gope) [<n>]":              Key("up:%(n)d"),
           "(down|gun|gown) [<n>]":            Key("down:%(n)d"),
           "left [<n>]":                       Key("left:%(n)d"),
           "right [<n>]":                      Key("right:%(n)d"),
           "(page up|pope) [<n>]":                    Key("pgup:%(n)d"),
           "(page down|pown) [<n>]":                  Key("pgdown:%(n)d"),
           "up <n> (page | pages)":            Key("pgup:%(n)d"),
           "down <n> (page | pages)":          Key("pgdown:%(n)d"),
           "left <n> (word | words)":          Key("c-left:%(n)d"),
           "right <n> (word | words)":         Key("c-right:%(n)d"),
		   "(home|west)":                      Key("home"),
           "(end|east)":                       Key("end"),
		   "(doc home|north)":                 Key("c-home"),
		   "(doc end|south)":                  Key("c-end"),
           
		   "fomble [<n>]":                     Key("c-right/5:%(n)d"),
		   "bamble [<n>]":                     Key("c-left/5:%(n)d"),
		   "dumbbell [<n>]":                   Key("c-backspace/5:%(n)d"),
		   "kimble [<n>]":                     Key("c-del/5:%(n)d"),

           "(space|Ace|Spooce) [<n>]":           release + Key("space:%(n)d"),
           "(enter|slap|shock|Loon) [<n>]":      release + Key("enter:%(n)d"),
           "(tab|tabby|tub|tubby) [<n>]":                  Key("tab:%(n)d"),
           "(delete|crack) [<n>]":                     release + Key("del:%(n)d"),
           "(delete|crack) [<n> | this] (line|lines)": release + Key("home, s-down:%(n)d, del"),
           "(backspace|chook) [<n>]":                  release + Key("backspace:%(n)d"),
           "(pop up|[context] menu)":            release + Key("apps"),
		   
           "paste":                            release + Key("c-v"),
           "copy":                             release + Key("c-c"),
           "cut":                              release + Key("c-x"),
           "select all":                       release + Key("c-a"),
           
		   "[hold] control":                   Key("ctrl:down/5"),
           "release control":                  Key("ctrl:up"),
		   
		   "[hold] (shift|sky)":               Key("shift:down/5"),
           "release shift":                    Key("shift:up"),
   		   
		   "hold (alternative|alt|meta)":    Key("alt:down/5"),
		   "(alternative|alt|meta)":    Key("alt:down/10", "alt:up"),	# this does not get released automatically like shift or controlT
		   "release (alternative|alt|meta)":   Key("alt:up"),

		   "hold super":                       Key("win:down/10"),
		   "super":                            Key("win:down/10, win:up"),
		   "release super":                    Key("win:up"),

           "release [all]":                    release,
		   		   
           "say <text>":                       release + Text("%(text)s"),
           "mimic <text>":                     release + Mimic(extra="text"),
		   
		   "snore":                            Mimic("go to sleep"),
		   
			"zero": Key("0"),
			"one": Key("1"),
			"two": Key("2"),
			"three": Key("3"),
			"four": Key("4"),
			"five": Key("5"),
			"six": Key("6"),
			"seven": Key("7"),
			"eight": Key("8"),
			"nine": Key("9"),
			
		    "(alpha|elf)": Key("a"),
			"(bravo|bruv)": Key("b"),
			"(charlie|char)": Key("c"),
			"(delta|dell)": Key("d"),
			"(echo|etch)": Key("e"),
			"(foxtrot|Fox)": Key("f"),
			"(golf|goal)": Key("g"),
			"(hotel|hot)": Key("h"),
			"(india|Indigo)": Key("i"),
			"(juliet|Julie|jewel)": Key("j"),
			"(kilo|keel)": Key("k"),
			"(lima|limb)": Key("l"),
			"(mike|Mick)": Key("m"),
			"(november|Nova|nov)": Key("n"),
			"(oscar|ouch)": Key("o"),
			"(papa|pop)": Key("p"),
			"(quebec|Queen)": Key("q"),
			"(romeo|rome|rock)": Key("r"),
			"(sierra|souk)": Key("s"),
			"(tango|tang|tank)": Key("t"),
			"(uniform|uni)": Key("u"),
			"(victor|Vic)": Key("v"),
			"(whiskey|whisk)": Key("w"),
			"(x-ray|ex)": Key("x"),
			"(yankee|Yank)": Key("y"),
			"(zulu|zoo)": Key("z"),

#			"arch": Key("a"),
#			"brov": Key("b"),
#			"chair": Key("c"),
#			"dell": Key("d"),
#			"etch": Key("e"),
#			"fomp": Key("f"),
#			"goof": Key("g"),
#			"hark": Key("h"),
#			"ice": Key("i"),
#			"jinks": Key("j"),
#			"koop": Key("k"),
#			"lug": Key("l"),
#			"mowsh": Key("m"),
#			"nerb": Key("n"),
#			"ork": Key("o"),
#			"pooch": Key("p"),
#			"quash": Key("q"),
#			"rosh": Key("r"),
#			"souk": Key("s"),
#			"teek": Key("t"),
#			"unks": Key("u"),
#			"verge": Key("v"),
#			"womp": Key("w"),
#			"trex": Key("x"),
#			"yang": Key("y"),
#			"zooch": Key("z"),
	
	
			
			
			"(escape|cancel|act)": Key("escape"),
			
			
			"plus": Key("plus"),
			"(minus|dash|hyphen|hive)": Key("minus"),
			"(comma|com|cam)": Key("comma"),
			"(colon|coal)": Key("colon"),
			"(equals|equal|eeks)": Key("equal"),
			"(less [than]|lang)": Key("lessthan"),
			"(greater [than]|rang)": Key("greaterthan"),
			"(point|dot|period|doot|dit)": Key("dot"),
			"(lape|len)": Key('leftparen'),
			"(rape|ren)": Key("rightparen"),
			"lace": Key("leftbrace"),
			"race": Key("rightbrace"),
			"lack": Key("leftbracket"),
			"rack": Key("rightbracket"),
			"[double] quote": Key("doublequote"),
			"(semi|semicolon)": Key("semicolon"),
			"(exclamation [mark]|bang|clam)": Key("exclamation"),
			"percent": Key("percent"),
			"(star|asterisk)": Key("asterisk"),
			"(forwardslash|slash)": Key("slash"),
			"(backslash|blash|clash)": Key("backslash"),
			"tilde": Key("tilde"),
			"(underscore|score)": Key("underscore"),
			"(single [quote]|sing)": Key("singlequote"),
			"(back tick|bing)": Key("backtick"),
			"(dollar|dolly)": Key("dollar"),
			"(caret|carrot)": Key("caret"),
			"(ampersand|amper|and sign|sandy)": Key("ampersand"),
			"(pipe|bar)": Key("bar"),
			"hash": Key("hash"),
			"(at (sign|symbol)|atte)": Key("at"),
			"(question [mark]|quest)": Key("question"),
			
			
			"do [left] click": Mouse("left"),
			"do right click": Mouse("right"),
			"do middle click": Mouse("middle"),
			"do double click": Mouse("left:2"),
			"do triple click": Mouse("left:3"),
			"do start drag": Mouse("left:down"),
			"do stop drag": Mouse("left:up"),
			
			# tab control in browsers and gnome-shell
			"(pret|Preet) [<n>]": Key("c-pgup/5:%(n)d"),
			"(net|neat)[<n>]": Key("c-pgdown/5:%(n)d"),
			"clote": Key("c-w"),
			"backward":    Key("a-left"),
			"forward":    Key("a-right"),
			
			
			# git commands
			"git status": Text("git status"),
			"git branch": Text("git branch"),
			"git log": Text("git log -p"),
			"git follow": Text("git log -p --follow "),
			"git pickaxe": Text("git log --pretty=oneline -S''") + Key('left'),
			
			# bash commands
			"grep": Text("grep -iE ''") + Key('left'),
			
			# Windows control
			"(win|when) flip": Key("alt:down, tab:down/10, alt:up"),	# the 10 is outerpause, and 5 is about the minimum for this to work
			"win toggle": Key("win:down, tab/50:2, win:up"),
			"win show": Key("ctrl:down, win:down, tab:down") + Key("control:up, win:up, tab:up"),
            "win next": Key("alt:down, tab:down/50, right, alt:up"),
			
			"volume up [<n>]": Key("volumeup:%(n)d"),
			"volume down [<n>]": Key("volumedown:%(n)d"),
	
          }


#---------------------------------------------------------------------------
# Here we define various functions for formatting text.
# Each of these functions must have a docstring which defines its
#  spoken-form.  This docstring must include the "<dictation>" extra.
#  See below for various examples.

# Format: some_words
def format_score(dictation):          # Function name must start with "format_".
    """ score <dictation> """         # Docstring defining spoken-form.
    text = str(dictation)             # Get written-form of dictated text.
    return "_".join(text.split(" "))  # Put underscores between words.

# Format: some_words()
def format_under_function(dictation):
    """ under func <dictation> """
    text = str(dictation)
    return "_".join(text.split(" ")) + "()"

# Format: SomeWords
def format_studley(dictation):
    """ studley <dictation> """
    text = str(dictation)
    words = [word.capitalize() for word in text.split(" ")]
    return "".join(words)

# Format: somewords
def format_one_word(dictation):
    """ [all] one word <dictation> """
    text = str(dictation)
    return "".join(text.split(" "))

# Format: SOMEWORDS
def format_upper_one_word(dictation):
    """ one word upper <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "".join(words)

# Format: SOME_WORDS
def format_upper_score(dictation):
    """ upper score <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "_".join(words)

# Format: someWords
def format_java_method(dictation):
    """ Java method <dictation> """
    text = str(dictation)
    words = text.split(" ")
    return words[0] + "".join(w.capitalize() for w in words[1:])
	
# Format: some-words
def format_dashes(dictation):
    """ (hive|dashes) <dictation> """
    text = str(dictation)
    words = text.split(" ")	
    return "-".join(words)

